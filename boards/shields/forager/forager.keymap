#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define NUM  2
#define SYM  3
#define FUN  4
#define MEDIA 5

&lt {
    // require-prior-idle-ms = <100>;
    tapping-term-ms = <150>;
    quick-tap-ms = <200>;
};

&mt {
    quick-tap-ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_del {
            timeout-ms = <50>;
            key-positions = <10 20>;
            bindings = <&kp DEL>;
        };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&kp ESC>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        fun_layer {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };

    behaviors {
        lhm: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        rhm: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
        };
    }


    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
            &kp Q           &kp W           &kp F           &kp P           &kp B                                           &kp J           &kp L           &kp U           &kp Y           &kp APOS
            &lhm LGUI A     &lhm LALT R     &lhm LCTRL S    &lhm LSHFT T    &kp G                                           &kp M           &rhm RSHFT N    &rhm RCTRL E    &rhm RALT I     &rhm RGUI O
            &kp Z           &kp X           &kp C           &kp D           &kp V                                           &kp K           &kp H           &kp COMMA       &kp DOT         &kp SLASH
                                                                            &lt MEDIA SPACE   &lt NAV TAB    &lt SYM ENTER  &lt NUM BSPC
            >;
        };

        nav {
            bindings = <
            &trans          &trans          &trans          &trans          &trans                                          &kp K_PASTE     &kp K_COPY      &kp K_CUT       &kp K_UNDO      &kp K_REDO
            &kp LGUI        &kp LALT        &kp LCTRL       &kp LSHFT       &trans                                          &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT       &kp CAPS
            &trans          &trans          &trans          &trans          &trans                                          &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP     &kp END         &kp INSERT
                                                                            &trans      &trans              &kp ENTER       &kp BSPC
            >;
        };

        num {
            bindings = <
            &kp LBKT        &kp N7          &kp N8          &kp N9          &kp RBKT                                        &trans        &trans          &trans          &trans          &trans
            &kp SEMI        &kp N4          &kp N5          &kp N6          &kp EQUAL                                       &trans        &kp RSHFT     &kp RCTRL       &kp RALT        &kp RGUI        
            &kp GRAVE       &kp N1          &kp N2          &kp N3          &kp BSLH                                        &trans        &trans          &trans          &trans          &trans
                                                                            &kp N0      &kp MINUS            &mo SYM        &trans
            >;
        };

        sym {
            bindings = <
            &kp LBRC        &kp AMPS        &kp ASTRK       &kp LPAR        &kp RBRC                                        &trans        &trans          &trans          &trans          &trans
            &kp COLON       &kp DLLR        &kp PRCNT       &kp CARET       &kp PLUS                                        &trans        &kp RSHFT     &kp RCTRL       &kp RALT        &kp RGUI        
            &kp TILDE       &kp EXCL        &kp AT          &kp HASH        &kp PIPE                                        &trans        &trans          &trans          &trans          &trans
                                                                            &kp RPAR    &kp UNDER             &trans        &mo NUM
            >;
        };

        fun {
            bindings = <
            &kp F12         &kp F7          &kp F8         &kp F9          &kp PSCRN                                        &trans        &trans          &trans          &trans          &trans
            &kp F11         &kp F4          &kp F5         &kp F6          &kp SLCK                                         &trans        &kp RSHFT       &kp RCTRL       &kp RALT        &kp RGUI        
            &kp F10         &kp F1          &kp F2         &kp F3          &kp PAUSE_BREAK                                  &trans        &trans          &trans          &trans          &trans
                                                                           &kp SPACE    &kp TAB               &trans        &trans
            >;
        };

        media {
            bindings = <
            &soft_off       &kp C_SLEEP     &bootloader     &bt BT_CLR_ALL  &bt BT_CLR                                      &bt BT_CLR    &bt BT_CLR_ALL  &bootloader     &kp K_SLEEP    &soft_off
            &trans          &trans          &trans          &trans          &trans                                          &kp C_PREV    &kp C_VOL_DN    &kp C_VOL_UP    &kp C_NEXT     &trans
            &trans          &trans          &trans          &trans          &trans                                          &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3   &bt BT_SEL 5
                                                                            &trans          &trans          &trans          &trans
            >;
        };
    };
};
